/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tienda.ui;

import com.tienda.dao.GenericDAO;
import com.tienda.entities.TiposUsuarios;
import com.tienda.entities.Usuarios;
import com.tienda.util.CorreoUtil;
import com.tienda.util.StaticConstans;
import com.tienda.util.Util;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MBN USER
 */
public class Administracion_usuarios extends javax.swing.JInternalFrame {

    private GenericDAO dao;
    public List<TiposUsuarios> tiposUsuarios;
    public DefaultTableModel model;

    /**
     * Creates new form Administracion_usuarios
     */
    public Administracion_usuarios(GenericDAO dao) {
        initComponents();

        //Se recibe el dao desde el jframe inicio
        this.dao = dao;

        //Se agregan los items de los tipos de usuarios
        tiposUsuarios = dao.buscarTodosTiposUsuarios();
        for (TiposUsuarios tipoUsuario : tiposUsuarios) {
            comboTiposUsuarios.addItem(tipoUsuario.getNombre());
        }

        //Se establecen los titulos de la tabla
        String titulos[] = {"Usuario Id", "Nombre de usuario", "Nombre", "Ap. Paterno", "Ap. Materno", "Tipo usuario"};
        model = new DefaultTableModel(null, titulos) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tabla.setModel(model);

        //Se agrega el listener para clic sobre la tabla
        tabla.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                int filaSeleccionada = tabla.getSelectedRow();
                if (filaSeleccionada > -1) {
                    lblUsuarioId.setText(model.getValueAt(filaSeleccionada, 0).toString());
                    txtEmail.setText(model.getValueAt(filaSeleccionada, 1).toString());
                    txtNombre.setText(model.getValueAt(filaSeleccionada, 2).toString());
                    txtApellidoP.setText(model.getValueAt(filaSeleccionada, 3).toString());
                    txtApellidoM.setText(model.getValueAt(filaSeleccionada, 4).toString());
                    comboTiposUsuarios.setSelectedItem(model.getValueAt(filaSeleccionada, 5).toString());
                }
            }
        });

        //Usuario id es nulo
        lblUsuarioId.setText("Nuevo");
    }

    public void limpiarCampos() {
        lblUsuarioId.setText("Nuevo");
        txtEmail.setText("");
        txtNombre.setText("");
        txtApellidoP.setText("");
        txtApellidoM.setText("");
        comboTiposUsuarios.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        detalle_admin_usuarios = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtApellidoP = new javax.swing.JTextField();
        txtApellidoM = new javax.swing.JTextField();
        comboTiposUsuarios = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        lblUsuarioId = new javax.swing.JLabel();
        opciones = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnguardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnsalir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Administraci√≥n de usuarios");

        detalle_admin_usuarios.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalle del usuario"));

        jLabel1.setText("*Email:");

        jLabel2.setText("*Nombre:");

        jLabel3.setText("*Apellido paterno:");

        jLabel5.setText("*Apellido materno:");

        jLabel4.setText("*Tipo usuario:");

        comboTiposUsuarios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Seleccionar ---" }));

        jLabel6.setText("Usuario id:");

        lblUsuarioId.setText("usuarioId");

        javax.swing.GroupLayout detalle_admin_usuariosLayout = new javax.swing.GroupLayout(detalle_admin_usuarios);
        detalle_admin_usuarios.setLayout(detalle_admin_usuariosLayout);
        detalle_admin_usuariosLayout.setHorizontalGroup(
            detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detalle_admin_usuariosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detalle_admin_usuariosLayout.createSequentialGroup()
                        .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(detalle_admin_usuariosLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtApellidoP)
                                    .addComponent(txtApellidoM)
                                    .addComponent(comboTiposUsuarios, 0, 180, Short.MAX_VALUE)))
                            .addGroup(detalle_admin_usuariosLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEmail)
                                    .addComponent(txtNombre)
                                    .addComponent(lblUsuarioId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(detalle_admin_usuariosLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        detalle_admin_usuariosLayout.setVerticalGroup(
            detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detalle_admin_usuariosLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblUsuarioId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtApellidoP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtApellidoM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detalle_admin_usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboTiposUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        opciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones"));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tienda/iconos/new.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnguardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tienda/iconos/save.png"))); // NOI18N
        btnguardar.setText("Guardar");
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tienda/iconos/update.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tienda/iconos/search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnsalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tienda/iconos/exit.png"))); // NOI18N
        btnsalir.setText("Salir");
        btnsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout opcionesLayout = new javax.swing.GroupLayout(opciones);
        opciones.setLayout(opcionesLayout);
        opcionesLayout.setHorizontalGroup(
            opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnguardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnsalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        opcionesLayout.setVerticalGroup(
            opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnguardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnActualizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnsalir)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(detalle_admin_usuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(opciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detalle_admin_usuarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
        String EMAIL = txtEmail.getText().trim();
        String NOMBRE = txtNombre.getText().trim();
        String APELLIDO_P = txtApellidoP.getText().trim();
        String APELLIDO_M = txtApellidoM.getText().trim();
        int TIPO_USUARIO = comboTiposUsuarios.getSelectedIndex();

        if (!"".equals(EMAIL) && !"".equals(NOMBRE) && !"".equals(APELLIDO_P) && !"".equals(APELLIDO_M) && TIPO_USUARIO != 0) {
            //Se valida el email
            if (CorreoUtil.validarEmail(EMAIL)) {
                Random numberRandom = new Random();
                String CONTRASENA = EMAIL + numberRandom.nextInt(10000) + 1;
                String CONTRASENA_ENCRIPTADA = Util.encriptarContrasena(CONTRASENA);

                TiposUsuarios tipoUsuario = new TiposUsuarios();
                tipoUsuario = tiposUsuarios.get(comboTiposUsuarios.getSelectedIndex() - 1);

                Usuarios usuario = new Usuarios();
                usuario.setNombreUsuario(EMAIL);
                usuario.setContrasena(CONTRASENA_ENCRIPTADA);
                usuario.setNombre(NOMBRE);
                usuario.setApellidoP(APELLIDO_P);
                usuario.setApellidoM(APELLIDO_M);
                usuario.setTiposUsuarios(tipoUsuario);

                //Se guarda al usuario
                if (dao.guardar(usuario)) {
                    JOptionPane.showMessageDialog(this, "Usuario registrado satisfactoriamente", "√âxito!", JOptionPane.INFORMATION_MESSAGE);
                    limpiarCampos();

                    //Se envia correo con contrasena
                    String contenido = "<p style=\"font-family: Helvetica,sans-serif; font-size:30px; color:#505050; padding:20px 20px 0px 20px\" >" + StaticConstans.MENSAJE_CORREO_ENCABEZADO + "</p>";
                    contenido += "<p style=\"font-family: Helvetica,sans-serif; font-size: 13px; line-height: 150%; color: #505050; padding: 20px 20px 0px 20px;\">" + StaticConstans.MENSAJE_CORREO_CUERPO + "<b>" + CONTRASENA + "</b></p>";
                    contenido += "<p style=\"font-family: Helvetica,sans-serif; font-size: 13px; line-height: 150%; color: #505050; padding: 20px 20px 0px 20px;\">" + StaticConstans.MENSAJE_CORREO_PIE + "</p>";
                    boolean correoEnviado = CorreoUtil.enviarCorreo(usuario.getNombreUsuario(), StaticConstans.ASUNTO, contenido);
                    if (correoEnviado) {
                        JOptionPane.showMessageDialog(this, "La contrase√±a para ingresar al sistema, se envi√≥ v√≠a email", "√âxito!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "La contrase√±a para ingresar al sistema es: " + usuario.getContrasena(), "√âxito!", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Ocurri√≥ un error al registrar al usuario", "Error!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Ingrese un email valido", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ingrese los campos requeridos", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnguardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        if(lblUsuarioId.getText().equals("Nuevo")){
            JOptionPane.showMessageDialog(this, "Este es un nuevo registro, utilice el bot√≥n 'Guardar'", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String EMAIL = txtEmail.getText().trim();
        String NOMBRE = txtNombre.getText().trim();
        String APELLIDO_P = txtApellidoP.getText().trim();
        String APELLIDO_M = txtApellidoM.getText().trim();
        int TIPO_USUARIO = comboTiposUsuarios.getSelectedIndex();

        if (!"".equals(EMAIL) && !"".equals(NOMBRE) && !"".equals(APELLIDO_P) && !"".equals(APELLIDO_M) && TIPO_USUARIO != 0) {
            //Se valida el email
            if (CorreoUtil.validarEmail(EMAIL)) {
                TiposUsuarios tipoUsuario = new TiposUsuarios();
                tipoUsuario = tiposUsuarios.get(comboTiposUsuarios.getSelectedIndex() - 1);

                Usuarios usuario = dao.buscarUsuarioPorId(Integer.parseInt(lblUsuarioId.getText()));
                //usuario.setUsuarioId(Integer.parseInt(lblUsuarioId.getText()));
                System.out.println("Usuario id:" + usuario.getUsuarioId());
                usuario.setNombreUsuario(EMAIL);
                usuario.setNombre(NOMBRE);
                usuario.setApellidoP(APELLIDO_P);
                usuario.setApellidoM(APELLIDO_M);
                usuario.setTiposUsuarios(tipoUsuario);

                //Se guarda al usuario
                if (dao.guardar(usuario)) {
                    JOptionPane.showMessageDialog(this, "Usuario actualizado satisfactoriamente", "√âxito!", JOptionPane.INFORMATION_MESSAGE);
                    limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(this, "Ocurri√≥ un error al actualizar al usuario", "Error!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Ingrese un email valido", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ingrese los campos requeridos", "Error!", JOptionPane.ERROR_MESSAGE);
        }

        btnBuscarActionPerformed(evt);
        limpiarCampos();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnsalirActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String EMAIL = txtEmail.getText().trim();
        String NOMBRE = txtNombre.getText().trim();
        String APELLIDO_P = txtApellidoP.getText().trim();
        String APELLIDO_M = txtApellidoM.getText().trim();
        int TIPO_USUARIO = comboTiposUsuarios.getSelectedIndex();
        String SQL_WHERE = " WHERE 1=1";

        if (!"".equals(EMAIL)) {
            SQL_WHERE += " AND nombre_usuario like '%" + EMAIL + "%'";
        }
        if (!"".equals(NOMBRE)) {
            SQL_WHERE += " AND nombre like '%" + NOMBRE + "%'";
        }
        if (!"".equals(APELLIDO_P)) {
            SQL_WHERE += " AND apellido_p like '%" + APELLIDO_P + "%'";
        }
        if (!"".equals(APELLIDO_M)) {
            SQL_WHERE += " AND apellido_m like '%" + APELLIDO_M + "%'";
        }
        if (TIPO_USUARIO != 0) {
            SQL_WHERE += " AND tipo_usuario=" + TIPO_USUARIO + "";
        }

        //Remueve los elementos contenidos en la tabla
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        //Se consultan los datos
        List<Usuarios> usuarios = dao.buscarUsuarios(SQL_WHERE);
        for (Usuarios usuario : usuarios) {
            Object[] u = new Object[6];
            u[0] = usuario.getUsuarioId();
            u[1] = usuario.getNombreUsuario();
            u[2] = usuario.getNombre();
            u[3] = usuario.getApellidoP();
            u[4] = usuario.getApellidoM();
            u[5] = usuario.getTiposUsuarios().getNombre();
            model.addRow(u);
            tabla.setModel(model);
        }

    }//GEN-LAST:event_btnBuscarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnguardar;
    private javax.swing.JButton btnsalir;
    private javax.swing.JComboBox<String> comboTiposUsuarios;
    private javax.swing.JPanel detalle_admin_usuarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblUsuarioId;
    private javax.swing.JPanel opciones;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField txtApellidoM;
    private javax.swing.JTextField txtApellidoP;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
